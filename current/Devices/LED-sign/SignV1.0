#define NUM_COLS 160
#define NUM_ROWS 16

#define CLEARBIT(ADDRESS,BIT)   (ADDRESS |= (1<<BIT))
#define SETBIT(ADDRESS,BIT) (ADDRESS &= ~(1<<BIT))
#define CHECKBIT(ADDRESS,BIT) (ADDRESS & (1<<BIT))


#include <AutoHome.h>

AutoHome autohome;

/* These variables need to be filled out with the information for your wifi details */
/* and the mqtt broker */
char const* mqtt_broker_ip = "192.168.1.10";
char const* mqtt_user = "autohome";
char const* mqtt_password = "autoHOME";
char const* host_name = "Sign";
char const* mqtt_topic = "/home/sign";


void start();
void latchOut();
void shiftData(int j);
void setLED(int x, int y, bool value);
void sendData();
void drawString(String s, int x, int y);
void clearDisplay();

//  GND
int clockPin = 5;
// NC       4
int strobe = 14;  // duble check this 
int dataPin = 12;
int outEnable = 13;
byte sign[16][20] = {

  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}

};

const byte emoji[4][7] = {

  {0x00, 0x12, 0x12, 0x00, 0x21, 0x1E, 0x00},  /* :) */
  {0x00, 0x12, 0x12, 0x00, 0x1E, 0x21, 0x00},  /* :( */
  {0x00, 0x04, 0x0C ,0x04, 0x06, 0x06, 0x00},  /* NOTE */
  {0x0E, 0x15, 0x15 ,0x1D, 0x11, 0x0E, 0x00},  /* Clock */

};

const byte font[126][7] = {

  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //1 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //2 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //3 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //4 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //5 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //6 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //7 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //8 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //9 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //10 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //11 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //12 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //13 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //14 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //15 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //16 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //17 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //18 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //19 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //20 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //21 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //22 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //23 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //24 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //25 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //26 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //27 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //28 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //29 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //30 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //31 */
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /* //32 */
  {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04}, /* !//33 */
  {0x00, 0x12, 0x09, 0x00, 0x00, 0x00, 0x00}, /* "//34 */
  {0x0A, 0xFF, 0x0A, 0x0A, 0xFF, 0x0A, 0x0A}, /* #//35 */
  
  {0x04, 0x1E, 0x01, 0x0E, 0x10, 0x0F, 0x04}, /* $//36 */   
  {0x03, 0x13, 0x08, 0x04, 0x02, 0x19, 0x18}, /* %//37 */
  {0x06, 0x09, 0x05 ,0x02, 0x15, 0x09, 0x16}, /* &//38 */
  {0x06, 0x04, 0x02 ,0x00, 0x00, 0x00, 0x00}, /* `//39 */
  {0x08, 0x04, 0x02 ,0x02, 0x02, 0x04, 0x08}, /* (//40 */
  {0x02, 0x04, 0x08 ,0x08, 0x08, 0x04, 0x02}, /*) //41 */
  {0x00, 0x04, 0x15 ,0x0E, 0x15, 0x04, 0x00}, /** //21 */
  {0x00, 0x04, 0x04 ,0x1F, 0x04, 0x04, 0x00}, /*+ //43 */
  {0x00, 0x00, 0x00 ,0x00, 0x03, 0x02, 0x01}, /*, //44 */
  {0x00, 0x00, 0x00 ,0x1F, 0x00, 0x00, 0x00}, /*- //45 */
  {0x00, 0x00, 0x00 ,0x00, 0x00, 0x06, 0x06}, /*. //46 */
  {0x00, 0x10, 0x08 ,0x04, 0x02, 0x01, 0x00}, /*/ //47 */
  {0x0E, 0x11, 0x19 ,0x15, 0x13, 0x11, 0x0E}, /*0 //48 */
  {0x04, 0x06, 0x04 ,0x04, 0x04, 0x04, 0x0E}, /*1 //49 */
  {0x0E, 0x11, 0x10 ,0x08, 0x04, 0x02, 0x1F}, /*2 //50 */
  {0x1F, 0x08, 0x04 ,0x08, 0x10, 0x11, 0x0E}, /*3 //51 */
  {0x08, 0x0C, 0x0A ,0x09, 0x1F, 0x08, 0x08}, /*4 //52 */
  {0x1F, 0x01, 0x0F ,0x10, 0x10, 0x11, 0x0E}, /*5 //53 */
  {0x0C, 0x02, 0x01 ,0x0F, 0x11, 0x11, 0x0E}, /*6 //54 */
  {0x1F, 0x10, 0x08 ,0x04, 0x02, 0x02, 0x02}, /*7 //55 */
  {0x0E, 0x11, 0x11 ,0x0E, 0x11, 0x11, 0x0E}, /*8 //56 */
  {0x0E, 0x11, 0x11 ,0x1E, 0x10, 0x08, 0x06}, /*9 //57 */
  {0x00, 0x06, 0x06 ,0x00, 0x06, 0x06, 0x00}, /*: //58 */
  {0x00, 0x06, 0x06 ,0x00, 0x06, 0x04, 0x02}, /*; //59 */
  {0x08, 0x04, 0x02 ,0x01, 0x02, 0x04, 0x08}, /*< //60 */
  {0x00, 0x00, 0x1F ,0x00, 0x1F, 0x00, 0x00},/*= //61 */
  {0x01, 0x02, 0x04 ,0x08, 0x04, 0x02, 0x01}, /*> //62 */
  {0x0E, 0x11, 0x10 ,0x08, 0x04, 0x00, 0x04}, /*? //63 */
  {0x0E, 0x11, 0x10 ,0x16, 0x15, 0x15, 0x0E}, /*@ //64 */
  {0x0E, 0x11, 0x11 ,0x11, 0x1F, 0x11, 0x11}, /*A //65 */
  {0x0F, 0x11, 0x11 ,0x0F, 0x11, 0x11, 0x0F}, /*B //66 */
  {0x0E, 0x11, 0x01 ,0x01, 0x01, 0x11, 0x0E}, /*C //67 */
  {0x07, 0x09, 0x11 ,0x11, 0x11, 0x09, 0x07}, /*D //68 */
  {0x1F, 0x01, 0x01 ,0x0F, 0x01, 0x01, 0x1F}, /*E //69 */
  {0x1F, 0x01, 0x01 ,0x0F, 0x01, 0x01, 0x01}, /*F //70 */
  {0x0E, 0x11, 0x01 ,0x1D, 0x11, 0x11, 0x0F}, /*G //71 */
  {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}, /*H //72 */
  {0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E}, /*I //73 */
  {0x1C, 0x08, 0x08 ,0x08, 0x08, 0x09, 0x06}, /*J //74 */
  {0x11, 0x09, 0x05 ,0x03, 0x05, 0x09, 0x11}, /*K //75 */
  {0x01, 0x01, 0x01 ,0x01, 0x01, 0x01, 0x1F}, /*L //76 */
  {0x11, 0x1B, 0x15 ,0x11, 0x11, 0x11, 0x11}, /*M //77 */
  {0x11, 0x11, 0x13 ,0x15, 0x19, 0x11, 0x11}, /*N //78 */
  {0x0E, 0x11, 0x11 ,0x11, 0x11, 0x11, 0x0E}, /*O //79 */
  {0x0F, 0x11, 0x11 ,0x0F, 0x01, 0x01, 0x01}, /*P //80 */
  {0x0E, 0x11, 0x11 ,0x11, 0x15, 0x09, 0x16}, /*Q //81 */
  {0x0F, 0x11, 0x11 ,0x0F, 0x05, 0x09, 0x11}, /*R //82 */
  {0x1E, 0x01, 0x01 ,0x0E, 0x10, 0x10, 0x0F}, /*S //83 */
  {0x1F, 0x04, 0x04 ,0x04, 0x04, 0x04, 0x04}, /*T //84 */
  {0x11, 0x11, 0x11 ,0x11, 0x11, 0x11, 0x0E}, /*U //85 */
  {0x11, 0x11, 0x11 ,0x11, 0x11, 0x0A, 0x04}, /*V //86 */
  {0x11, 0x11, 0x11 ,0x15, 0x15, 0x15, 0x0A}, /*W //87 */
  {0x11, 0x11, 0x0A ,0x04, 0x0A, 0x11, 0x11}, /*X //88 */
  {0x11, 0x11, 0x11 ,0x0E, 0x04, 0x04, 0x04}, /*Y //89 */
  {0x1F, 0x10, 0x08 ,0x04, 0x02, 0x01, 0x1F}, /*Z //90 */
  {0x0E, 0x02, 0x02 ,0x02, 0x02, 0x02, 0x0E}, /*[ //91 */
  {0x00, 0x01, 0x02 ,0x04, 0x08, 0x10, 0x00}, /*\ //92 */
  {0x0E, 0x08, 0x08 ,0x08, 0x08, 0x08, 0x0E}, /*] //93 */
  {0x04, 0x0A, 0x11 ,0x00, 0x00, 0x00, 0x00}, /*^ //94 */
  {0x00, 0x00, 0x00 ,0x00, 0x00, 0x00, 0x1F}, /*_ //95 */
  {0x02, 0x04, 0x08 ,0x00, 0x00, 0x00, 0x00}, /*` //96 */
  {0x00, 0x00, 0x0E ,0x10, 0x1E, 0x11, 0x1E}, /*a //97 */
  {0x01, 0x01, 0x0D ,0x13, 0x11, 0x11, 0x0F}, /*b //98 */
  {0x00, 0x00, 0x0E ,0x01, 0x01, 0x11, 0x0E},
  {0x10, 0x10, 0x16 ,0x19, 0x11, 0x11, 0x1E},
  {0x00, 0x00, 0x0E ,0x11, 0x1F, 0x01, 0x0E},
  {0x0C, 0x12, 0x02 ,0x07, 0x02, 0x02, 0x02},
  {0x00, 0x1E, 0x11 ,0x11, 0x1E, 0x10, 0x0E},
  {0x01, 0x01, 0x0D ,0x13, 0x11, 0x11, 0x11},
  {0x04, 0x00, 0x06 ,0x04, 0x04, 0x04, 0x0E},
  {0x08, 0x00, 0x0C ,0x08, 0x08, 0x09, 0x06},
  {0x01, 0x01, 0x09 ,0x05, 0x03, 0x05, 0x09},
  {0x06, 0x04, 0x04 ,0x04, 0x04, 0x04, 0x0E},
  {0x00, 0x00, 0x0B ,0x15, 0x15, 0x11, 0x11},
  {0x00, 0x00, 0x0D ,0x13, 0x11, 0x11, 0x11},
  {0x00, 0x00, 0x0E ,0x11, 0x11, 0x11, 0x0E},
  {0x00, 0x00, 0x0F ,0x11, 0x0F, 0x01, 0x01},
  {0x00, 0x00, 0x16 ,0x19, 0x1E, 0x10, 0x10},
  {0x00, 0x00, 0x0D ,0x13, 0x01, 0x01, 0x01},
  {0x00, 0x00, 0x0E ,0x01, 0x0E, 0x10, 0x0F},
  {0x02, 0x02, 0x07 ,0x02, 0x02, 0x12, 0x0C},
  {0x00, 0x00, 0x11 ,0x11, 0x11, 0x19, 0x16},
  {0x00, 0x00, 0x11 ,0x11, 0x11, 0x0A, 0x04},
  {0x00, 0x00, 0x11 ,0x11, 0x15, 0x15, 0x0A},
  {0x00, 0x00, 0x11 ,0x0A, 0x04, 0x0A, 0x11},
  {0x00, 0x00, 0x11 ,0x11, 0x1E, 0x10, 0x0E},
  {0x00, 0x00, 0x1F ,0x08, 0x04, 0x02, 0x1F},
  {0x08, 0x04, 0x04 ,0x02, 0x04, 0x04, 0x08},
  {0x04, 0x04, 0x04 ,0x04, 0x04, 0x04, 0x04},
  {0x02, 0x04, 0x04 ,0x08, 0x04, 0x04, 0x02},
  {0x00, 0x00, 0x16 ,0x09, 0x00, 0x00, 0x00},

};

void setup() {

  Serial.begin(9600);

  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(outEnable, OUTPUT);
  pinMode(strobe, OUTPUT);

  digitalWrite(clockPin, LOW);
  digitalWrite(dataPin, HIGH);
  digitalWrite(outEnable, LOW);
  digitalWrite(strobe, HIGH);

//  drawEmoji(0, 1, 0);
//  drawEmoji(2, 7, 0);
//  drawEmoji(1, 1, 9);
//  drawEmoji(3, 7, 9);

 autohome.setPacketHandler(mqtt_callback);
 
 autohome.begin(mqtt_broker_ip, mqtt_user, mqtt_password, host_name, mqtt_topic);

  drawEmoji(2, 0, 0);
  drawString("Hello world",6,0);

  

}

/* This function will be called every time a packet is received from the mqtt topic. */
/* This is registered in the setup() */
void mqtt_callback(char* topic, byte* payload, unsigned int length){

clearDisplay(); // clear the screan

  String packet = "";
  String packet2 = "";
  int line = 0;
  
  for (int i = 0; i < length; i++) {

    if((char)payload[i] == '\n'){
      line = 1;
      continue;
    }

    if(line == 0 ){
      packet = packet + (char)payload[i];
    } else {
      packet2 = packet2 + (char)payload[i];
    }
    
  }

 // Serial.print(packet);
drawString(packet, 0, 1);
drawString(packet2, 0, 9);
  
}

void loop() {

    autohome.loop();
      
// String s = "";
//  if(Serial.available()){
//    char c = Serial.read();
//    switch ( c ){
//      case 't': {
//        clearDisplay();
//        drawString("12:00", 60, 0);
//        drawString("11/02/2017", 41, 8); 
//      } 
//    }
//    String line = words
//    clearDisplay();
//    drawString(line,6,0);
//  }

  sendData();
   

}

void clearDisplay(){

  for(int i = 0; i < 16; i++){
    for(int j = 0; j < 20; j++){

      sign[i][j] = 0xFF;
      
    }
  }
  
}

void drawString(String s, int x, int y){

  for (int i = 0; i < s.length(); i++) {

    int start = x + (i * 7);

    drawChar(s.charAt(i), start, y);
    
  }
  
}

void drawChar(char id, int x, int y) {

  for (int row = 0; row < 7; row++) {

    if (y + row >= 0 && y + row <= NUM_ROWS) {

      for (int col = 0; col < 5; col++) {

        if (x + col >= 0 && x + col <= NUM_COLS) {

          setLED(x + col, y + row, CHECKBIT(font[id - 1][row], col));

        }

      }

    }

  }

}

void drawEmoji(int id, int x, int y) {

  for (int row = 0; row < 7; row++) {

    if (y + row >= 0 && y + row <= NUM_ROWS) {

      for (int col = 0; col < 6; col++) {

        if (x + col >= 0 && x + col <= NUM_COLS) {

          setLED(x + col, y + row, CHECKBIT(emoji[id][row], col));

        }

      }

    }

  }

}

void sendData() {

  start();

  shiftData(14);
  shiftData(13);
  shiftData(12);
  shiftData(11);
  shiftData(10);
  shiftData(9);
  shiftData(8);
  shiftData(7);
  shiftData(6);
  shiftData(5);
  shiftData(4);
  shiftData(3);
  shiftData(2);
  shiftData(1);
  shiftData(0);
  shiftData(15);

}

void shiftData(int j) {

  for (int i = 0; i < 20; i++) {

    shiftOut(dataPin, clockPin, LSBFIRST, sign[j][i]);

  }

  latchOut();

}

void setLED(int x, int y, bool val) {

  if (x >= NUM_COLS || y >= NUM_ROWS) {
    return;
  }

  int module = floor(x / 8);

  if (val) {

    SETBIT(sign[y][module], x % 8);

  } else {

    CLEARBIT( sign[y][module], x % 8);

  }

}

void start() {

  delay(0.5f);
  digitalWrite(outEnable, HIGH);
  delay(0.5f);
  digitalWrite(strobe, LOW);
  delay(0.5f);
  digitalWrite(strobe, HIGH);
  delay(0.7f);
  digitalWrite(outEnable, LOW);
  delay(0.5f);
  digitalWrite(strobe, LOW);
  delay(0.5f);
  digitalWrite(strobe, HIGH);
  delay(0.5f);
  digitalWrite(outEnable, HIGH);
  delay(0.5f);
  digitalWrite(strobe, LOW);
  delay(0.5f);
  digitalWrite(strobe, HIGH);
  delay(0.5f);
  digitalWrite(outEnable, LOW);

}

void latchOut() {

  digitalWrite(dataPin, HIGH);
  delay(0.5f);
  digitalWrite(outEnable, HIGH);
  delay(0.1f);
  digitalWrite(strobe, LOW);
  delay(0.1f);
  digitalWrite(strobe, HIGH);
  delay(0.1f);
  digitalWrite(outEnable, LOW);
  delay(0.5);

}
